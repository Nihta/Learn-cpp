{
	"Init": {
		"scope": "cpp",
		"prefix": "init",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"using namespace std;",
			"",
			"int main() {",
			"\t$1",
			"\treturn  0;",
			"}"
		],
		"description": "Init program"
	},
	"Cout vector": {
		"scope": "cpp",
		"prefix": "cout-vector",
		"body": [
			"// Output Operator Overloading",
			"template <typename T>",
			"ostream &operator<<(ostream &os, vector<T> vt)",
			"{",
			"    os << \"(\" << vt.size() << \") { \";",
			"    for (auto it = vt.begin(); it != vt.end(); it++)",
			"        os << *it << (it + 1 != vt.end() ? \", \" : \"\");",
			"    os << \" }\";",
			"    return os;",
			"}"
		],
		"description": "Nạp chồng << vector"
	},
	"Cin vector": {
		"scope": "cpp",
		"prefix": "cin-vector",
		"body": [
			"istream &operator>>(istream &is, vector<${1:int}> &v)",
			"{",
			"    int numOfElm;",
			"    is >> numOfElm;",
			"    ${1:int} data;",
			"    while (numOfElm--)",
			"    {",
			"        is >> data;",
			"        v.push_back(data);",
			"    }",
			"    return is;",
			"}"
		],
		"description": "Nhập vector dạng: SốLượngPhầnTử Phầntử1 PhầnTử2 ..."
	},
	"Find with regex": {
		"scope": "cpp",
		"prefix": "find-with-regex",
		"body": [
			"vector<string> findWithRegex(string text)",
			"{",
			"    // Regex",
			"    regex re(\"[A-Za-z]+\");",
			"    vector<string> res;",
			"    for (auto reIt = sregex_iterator(text.begin(), text.end(), re);reIt != sregex_iterator(); ++reIt)",
			"        res.push_back(reIt->str());",
			"    return res;",
			"}"
		],
		"description": "Tìm tất cả string khớp với regex"
	},
	"LCM": {
		"scope": "cpp",
		"prefix": "lcm",
		"body": [
			"int lcm(int a, int b)",
			"{",
			"\treturn a * b / std::__gcd(a, b);",
			"}"
		],
		"description": "Tìm bội chung nhỏ nhất"
	}
}
